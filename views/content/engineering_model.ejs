<div class="row">
    <div class="col-12">
       <div class="card ">
          <div class="card-header " style="display: flex; justify-content: space-between; align-items: center;">
             <h3 class="card-title">Departments</h3>
             <span style="margin-left: auto;">
             <button type="button" class="btn btn-secondary" id="newButton">
             New
             </button>
             <button type="button" class="btn btn-secondary" id="modelButton" style="display: none;"> 
             Models
             </button>
             <button type="button" class="btn btn-secondary" onclick="printContent()">
             <i>
               <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="2"><path stroke-dasharray="2 4" stroke-dashoffset="6" d="M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"><animate attributeName="stroke-dashoffset" dur="0.6s" repeatCount="indefinite" values="6;0"/></path><path stroke-dasharray="30" stroke-dashoffset="30" d="M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.1s" dur="0.3s" values="30;0"/></path><path stroke-dasharray="10" stroke-dashoffset="10" d="M12 8v7.5"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.5s" dur="0.2s" values="10;0"/></path><path stroke-dasharray="6" stroke-dashoffset="6" d="M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.7s" dur="0.2s" values="6;0"/></path></g></svg>
             </i>
             </button>
             </span>
          </div>
          <!-- /.card-header -->
          <div class="card-body p-0 my-2 mx-4" id="modelTable">
             <div class="table-responsive">
                <table class="table m-0" id="department">
                   <thead>
                      <tr>
                         <th>Model ID</th>
                         <th>Name</th>
                         <th>Material</th>
                         <th>Target</th>
                         <th></th>
                      </tr>
                   </thead>
                   <tbody id="modelsTabelBody">
                     <% models.forEach((model) => { %>
                      <tr id="table-<%- model.model_id %>">
                         <td class="id_model"><%- model.model_id %></td>
                         <td id="model-name-<%- model.model_name %>"><a href="#"><%- model.model_name %></a></td>
                         <td><%- model.materials_text %></td>
                         <td id="target-<%- model.model_id %>"><%- model.model_target %></td>
                         <td style="display: flex; justify-content: flex-end;">
                           <a href="#" class="mt-1 mr-1 badge badge-secondary" id="employee-profile-button">
                              <i>
                                 <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="white" d="M17.75 20.25q-1.575 0-2.663-1.088T14 16.5q0-1.575 1.088-2.663t2.662-1.087q1.575 0 2.663 1.088T21.5 16.5q0 1.575-1.088 2.663T17.75 20.25ZM4 17.5v-2h8v2H4Zm2.25-6.25q-1.575 0-2.663-1.088T2.5 7.5q0-1.575 1.088-2.663T6.25 3.75q1.575 0 2.663 1.088T10 7.5q0 1.575-1.088 2.663T6.25 11.25ZM12 8.5v-2h8v2h-8Z"/></svg>
                              </i>
                           </a>
                            <a href="#" class="mt-1 mr-1 badge badge-warning" onclick="editData(parseInt('<%- model.model_id %>'), '<%- model.model_name %>', '<%- model.model_target %>')">
                               <i>
                                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                     <g fill="none">
                                        <path d="M24 0v24H0V0h24ZM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01l-.184-.092Z"/>
                                        <path fill="currentColor" d="M13 3a1 1 0 0 1 .117 1.993L13 5H5v14h14v-8a1 1 0 0 1 1.993-.117L21 11v8a2 2 0 0 1-1.85 1.995L19 21H5a2 2 0 0 1-1.995-1.85L3 19V5a2 2 0 0 1 1.85-1.995L5 3h8Zm6.243.343a1 1 0 0 1 1.497 1.32l-.083.095l-9.9 9.899a1 1 0 0 1-1.497-1.32l.083-.094l9.9-9.9Z"/>
                                     </g>
                                  </svg>
                               </i>
                            </a>

                            <a href="#" class="mt-1 mr-1 badge badge-danger" onclick="deleteData(parseInt('<%- model.model_id %>'))">
                               <i>
                                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                     <path fill="currentColor" d="M7 21q-.825 0-1.413-.588T5 19V6H4V4h5V3h6v1h5v2h-1v13q0 .825-.588 1.413T17 21H7ZM17 6H7v13h10V6ZM9 17h2V8H9v9Zm4 0h2V8h-2v9ZM7 6v13V6Z"/>
                                  </svg>
                               </i>
                            </a>
                         </td>
                      </tr>
                      <% }); %>
                   </tbody>
                </table>
             </div>
             <!-- /.table-responsive -->
          </div>
          <div class="card-body" id="modelForm" style="display: none;">
             <form id="addModelForm">
                <div class="form-group">
                   <label for="id">Model ID</label>
                   <input type="text" class="form-control" id="modelId" name="id" required>
                </div>
                <div class="form-group">
                   <label for="name">Name</label>
                   <input type="text" class="form-control" id="modelName" name="name" required>
                </div>
                <div class="form-group">
                  <label fomodel_targetr="target_quantity">Target Quantity</label>
                  <input type="text" class="form-control" id="targetQuantity" name="target_quantity" required>
               </div>
               </form>
               <div class="button-submit-model"></div>
          </div>
          <!-- /.card-body -->
       </div>
       <!-- /.card -->
    </div>
    <!-- /.col -->
 </div>
 <script>
      const idArray = [];
      document.querySelectorAll(".id_model").forEach((data) => {
        idArray.push(parseInt(data.textContent));
      });


        let table = new DataTable('#department', {
            deferRender: true, // This option defers rendering of the table until required
            processing: true,  // Show a processing indicator while waiting for data
            sort: false
        });

        const newButton = document.getElementById('newButton');
        const modelButton= document.getElementById('modelButton');
        const modelTable = document.getElementById('modelTable');
        const modelForm = document.getElementById('modelForm');
        const addModelForm = document.getElementById('addModelForm');

        const modelIdForm = document.getElementById("modelId")
        const modelNameForm = document.getElementById("modelName");
        const modelTargetForm = document.getElementById("targetQuantity");

        // Membuat Submit Button untuk data baru maupun data lama
         const createSubmitButton = (params) => {
            // Menambahkan tombol submit ke dalam elemen dengan class "submit-button"
            const submitButtonContainer = document.querySelector('.button-submit-model');
            submitButtonContainer.innerHTML = `<button type="button" class="btn btn-primary" onclick="${params}">Submit</button>`;
         }

         function showForm() {
            modelTable.style.display = 'none';
            modelForm.style.display = 'block';
            modelButton.style.display = "inline";
            newButton.style.display = "none";
         }
         function showTable() {
            modelForm.style.display = 'none';
            modelTable.style.display = 'table';
            modelButton.style.display = "none";
            newButton.style.display = "inline";   
         }

        newButton.addEventListener("click", () => {
         showForm();
         if (modelIdForm.disabled) {
            modelIdForm.disabled = !modelIdForm.disabled;
         }
         createSubmitButton("saveData()");
        });

        modelButton.addEventListener("click", () => {
         showTable()
         clearForm();
        });

        function clearForm() {
            modelIdForm.value = "";
            modelNameForm.value = "";
            modelTargetForm.value = "";
        }
        
      //   const modelMaterials = [];
      //   function showSelectedItems() {
      //       var checkboxes = document.querySelectorAll('input[name="item-material"]:checked');
      //       modelMaterials.length = 0; // Mengosongkan array sebelum menambahkan item
      //       for (var i = 0; i < checkboxes.length; i++) {
      //          const value = checkboxes[i].value;
      //          if (!modelMaterials.includes(value)) {
      //             modelMaterials.push(value);
      //          }
      //       }
      //   }

      function saveData() {
         const id = modelIdForm.value;
         const name = modelNameForm.value;
         const target = modelTargetForm.value
         
         let isExist;
         idArray.forEach(element => {
            console.log('Element', element);
            if (parseInt(id) === element) {
               isExist = true;
               Swal.fire("Error", "Model ID is Existed!", "error");
            }
         });
         if (id === "") {
            Swal.fire("Error", "Model ID is Empty!", "error");
            return;
         }
         if (name === "") {
            Swal.fire("Error", "Model Name is Empty!", "error");
            return;
         }
         if (!isExist) {
            Swal.fire({
               title: "Are you sure?",
               text: `Adding ${name} as Model.`,
               icon: "info",
               showCancelButton: true,
               confirmButtonColor: '#3085d6',
               cancelButtonColor: '#d33',
               confirmButtonText: "Yes, Add New Model."
            }).then((resultAdd) => {
               if (resultAdd.isConfirmed) {   
                  const data = {
                     id: id,
                     name: name,
                     target: target
                  }
                  fetch("/engineering/model", {
                     method: "POST",
                     headers: {
                        'Content-Type': 'application/json'
                     },
                     body: JSON.stringify(data)
                  })
                  .then(response => response.json())
                  .then(results => {
                     console.log(results);
                     Swal.fire({
                        title: "Success",
                        text: `${name} added.`,
                        icon: "success",
                        confirmButtonText: "OK"
                     }).then((resultOk) => {
                        location.reload();
                        // Jika tombol OK ditekan
                     });
                  })
                  .catch(error => {
                     Swal.fire({
                        title: "Error",
                        text: error,
                        icon: "error",
                        confirmButtonText: "OK",
                     });
                  });
               }
            });
         }
      }

      function editData(id, name, targetQuantity) {
         modelTable.style.display = 'none';
         modelForm.style.display = 'block';
         modelButton.style.display = "inline";
         newButton.style.display = "none";

         modelIdForm.value = id;
         modelNameForm.value = name;
         modelTargetForm.value = targetQuantity;

         modelIdForm.disabled = !modelIdForm.disabled;

         createSubmitButton("saveEditData()");
      }

      function saveEditData() {
         const data = {
            id: modelIdForm.value,
            name: modelNameForm.value,
            target: modelTargetForm.value
         }
         fetch("/engineering/model", {
            method: "PUT",
            body: JSON.stringify(data),
            headers: {
               "Content-Type": "application/json"
            }
         }).then(response => response.json())
         .then(results => {
            toastr.success(`${data.name} Success Updated.`, "Success");
            document.getElementById(`target-${data.id}`).innerHTML = data.target;
            document.getElementById(`model-name-${data.name}`).innerHTML = data.name
            showTable();
            clearForm();
         })
         .catch(error => {
            toastr.error(`${error}.`, "Error");
         })
      }

      function deleteData(id) {
         const data = {
            id: parseInt(id)
         }

         Swal.fire({
            title: "Are you sure?",
            text: `Delete ${id}, you can't revert this!`,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: "Yes, Delete it!"
         }).then(results => {
            if (results.isConfirmed) {
               fetch("/engineering/model", {
                  method: "DELETE",
                  body: JSON.stringify(data),
                  headers: {
                     "Content-Type": "application/json"
                  }
               }).then(response => response.json)
               .then(results => {
                  toastr.success(`${data.id} Success delete.`, "Success");
                  document.getElementById(`table-${id}`).remove();
               })
               .catch(error => toastr.error(`${error}.`, "Error"));               
               }
         })

      }

 </script>